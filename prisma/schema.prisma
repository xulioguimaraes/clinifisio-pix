generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id            String             @id @default(uuid())
  username      String             @unique
  name          String
  bio           String?
  email         String?            @unique
  created_at    DateTime           @default(now()) @map("create_at")
  avatar_url    String?
  accounts      Account[]
  sessions      Session[]
  timeIntervals UserTimeInterval[]
  schedulings   Scheduling[]
  transactions  Transation[]
  services      Service[]

  @@map("users")
}

model Account {
  id                  String       @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Transation          Transation[]

  @@unique([provider, provider_account_id])
  @@index([user_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  user_id               String
  user                  User   @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("users_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String?
  observations String?
  created_at   DateTime @default(now())
  user_id      String
  phone        String?
  id_service   String
  user         User     @relation(fields: [user_id], references: [id])
  service      Service  @relation(fields: [id_service], references: [id])
  status       Int      @default(1) // 1 - Pendente, 2 - Confirmado, 3 - Cancelado, 4 - Atendido

  @@index([user_id])
  @@map("schedulings")
}

model Transation {
  id          Int      @id @default(autoincrement())
  title       String
  price       Int
  description String?
  type        Boolean
  createdAt   DateTime @default(now()) @map("created_at")
  accountId   String?  @map("accountId")
  userId      String?  @map("userId")
  User        User?    @relation(fields: [userId], references: [id])
  Account     Account? @relation(fields: [accountId], references: [id])

  @@map("transation")
}

model Service {
  id          String   @id @unique @default(uuid())
  userId      String
  name        String
  description String?
  price       Decimal  @default(0.0)
  porcentagem Decimal  @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Scheduling Scheduling[]

  @@map("services")
}
